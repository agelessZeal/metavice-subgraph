type MasterChef @entity {
  # Contract address
  id: ID!

  #owner: Bytes!
  #migrator: Bytes!

  #sushiPerBlock: BgInt! not needed till fully migrated over
  totalAllocPoint: BigInt!

  pools: [Pool!] @derivedFrom(field: "masterChef")
  poolCount: BigInt!

  #history: [History!]! @derivedFrom(field: "masterChef")

  timestamp: BigInt!
  block: BigInt!
}

type Pool @entity {
  # Index of pool in poolInfo on MasterChef contract
  id: ID!
  masterChef: MasterChef!
  pair: Bytes!

  rewarder: Rewarder

  allocPoint: BigInt!
  lastRewardBlock: BigInt!
  accSushiPerShare: BigInt!

  slpBalance: BigInt!

  users: [User!]! @derivedFrom(field: "pool")
  userCount: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type Rewarder @entity {
  # address
  id: ID!
  rewardToken: Bytes!
  rewardPerSecond: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type User @entity {
  # Pool id concatenated with user address
  id: ID!

  address: Bytes!
  pool: Pool

  amount: BigInt!
  rewardDebt: BigInt!
  sushiHarvested: BigInt!

  timestamp: BigInt!
  block: BigInt!
}
